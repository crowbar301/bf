(defun bf-run (cs m)
  (cond
    ((or (null cs) (char= (car cs) #\])) (cons (cdr cs) m))
    ((char= (car cs) #\[)
     (if (= (aref m 0) 0)
       (bf-run (car (bf-run (cdr cs) m)) m)
       (bf-run cs (cdr (bf-run (cdr cs) m)))))
    (t (bf-run (cdr cs)
               (case (car cs)
                 (#\+ (vector (+ (aref m 0) 1) (aref m 1) (aref m 2)))
                 (#\- (vector (- (aref m 0) 1) (aref m 1) (aref m 2)))
                 (#\> (let ((n (aref m 2)))
                        (if n
                          (vector (aref n 0) (vector (aref m 0) (aref m 1) nil) (aref n 2))
                          (vector 0 (vector (aref m 0) (aref m 1) nil) nil))))
                 (#\< (let ((p (aref m 1)))
                        (if p
                          (vector (aref p 0) (aref p 1) (vector (aref m 0) nil (aref m 2)))
                          (vector 0 nil (vector (aref m 0) nil (aref m 2))))))
                 (#\, (vector (char-code (read-char)) (aref m 1) (aref m 2)))
                 (#\. (princ (code-char (aref m 0))) m)
                 (t m))))))

(defun bf (filename)
  (with-open-file (s filename)
    (labels ((l (c ret)
               (if (eq c 'eof)
                 (reverse ret)
                 (l (read-char s nil 'eof) (cons c ret)))))
      (bf-run (l (read-char s nil 'eof) '()) (vector 0 nil nil))))
  t)
